name: Build and Release Jar

on:
  push:
    branches: [ nextgen ]
  workflow_dispatch:

jobs:
  build-and-release:
    if: github.ref == 'refs/heads/nextgen'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setting up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'graalvm'
          java-version: '21'

      - name: Grant permissions to src-theme
        run: sudo chmod -R 777 src-theme

      - name: Setup and build
        uses: gradle/gradle-build-action@v3
        env:
          CI: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          arguments: genSources build -x test -x detekt

      - name: Prepare release metadata
        id: metadata
        run: |
          BUILD_TIME=$(date -u +"%Y%m%d-%H%M%S")
          echo "build_time=$BUILD_TIME" >> "$GITHUB_OUTPUT"
          echo "tag_name=$BUILD_TIME" >> "$GITHUB_OUTPUT"
          echo "release_name=$BUILD_TIME" >> "$GITHUB_OUTPUT"
          echo "release_body=Automated build from commit $GITHUB_SHA at $BUILD_TIME UTC" >> "$GITHUB_OUTPUT"

      - name: Locate build artifact
        id: artifact
        run: |
          JAR_PATH=$(find build/libs -maxdepth 1 -type f -name '*.jar' ! -name '*-sources.jar' ! -name '*-javadoc.jar' | head -n 1)
          if [ -z "$JAR_PATH" ]; then
            echo "Unable to locate jar artifact in build/libs"
            exit 1
          fi
          ASSET_NAME=$(basename "$JAR_PATH")
          echo "jar_path=$JAR_PATH" >> "$GITHUB_OUTPUT"
          echo "asset_name=$ASSET_NAME" >> "$GITHUB_OUTPUT"

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.metadata.outputs.tag_name }}
          release_name: ${{ steps.metadata.outputs.release_name }}
          body: ${{ steps.metadata.outputs.release_body }}
          draft: false
          prerelease: false

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.artifact.outputs.jar_path }}
          asset_name: ${{ steps.artifact.outputs.asset_name }}
          asset_content_type: application/java-archive
